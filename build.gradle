/*
 * Copyright 2020 Peter Kenji Yamanaka
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
  ext {
    // SDK
    minSdk = 22
    maxSdk = 33

    // Kotlin
    kotlin_version = '1.8.10'

    // Kotlinx
    coroutines = "1.6.4"

    // Androidx
    annotation = "1.5.0"
  }
}


plugins {
  // Android AGP
  // https://developer.android.com/studio/build#top-level
  id 'com.android.library' version '7.4.1' apply false

  // Fix Android build cache
  // https://github.com/gradle/android-cache-fix-gradle-plugin
  id "org.gradle.android.cache-fix" version "2.6.5" apply false

  // Kotlin
  // https://developer.android.com/studio/build#top-level
  id 'org.jetbrains.kotlin.android' version "$kotlin_version" apply false

  // Dokka
  // https://github.com/Kotlin/dokka
  id 'org.jetbrains.dokka' version "1.7.20" apply false

  // Gradle version checker
  // https://github.com/ben-manes/gradle-versions-plugin
  id 'com.github.ben-manes.versions' version '0.46.0' apply false

  // Spotless
  // https://github.com/diffplug/spotless
  id "com.diffplug.spotless" version "6.15.0" apply false

  // Validate the public API
  // https://github.com/Kotlin/binary-compatibility-validator
  id 'org.jetbrains.kotlinx.binary-compatibility-validator' version '0.13.0'
}

subprojects {
  // Android AGP
  apply plugin: 'com.android.library'

  // AGP Cache Fix
  apply plugin: "org.gradle.android.cache-fix"

  // Kotlin
  apply plugin: 'kotlin-android'

  // Dokka
  apply plugin: 'org.jetbrains.dokka'

  // Maven Publish
  apply plugin: 'maven-publish'

  final String POM_GROUP = "com.github.pyamsoft"
  final String POM_VERSION = "0.2.1-SNAPSHOT"

  android {
    compileSdkVersion rootProject.ext.maxSdk

    //noinspection GroovyMissingReturnStatement
    defaultConfig {
      minSdkVersion rootProject.ext.minSdk

      // For vector drawables
      vectorDrawables.useSupportLibrary = true

      // Consumer proguard file
      consumerProguardFiles "proguard-rules.pro"

      // Only English, I don't have any translations
      resConfigs "en"

      compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
      }

      kotlinOptions {
        jvmTarget = "11"
      }

      publishing {
        singleVariant("release") {
          // Do not include withSources and withJavadoc here because we will
          // add them with our own custom hooks below
        }
      }
    }

    buildTypes {
      debug {
        minifyEnabled false
        shrinkResources false
      }

      release {
        minifyEnabled false
        shrinkResources false
        proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
      }
    }

    buildFeatures {
      buildConfig false
    }
  }

  // Configure matching toolchains
  // https://kotlinlang.org/docs/gradle-configure-project.html#2c42d1dc
  kotlin {
    jvmToolchain(11)
  }
  java {
    toolchain {
      languageVersion.set(JavaLanguageVersion.of(11))
    }
  }

  dependencies {
    // Apply core library desugaring at the most recent version
    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:2.0.2"
  }

  project.afterEvaluate {
    task androidSourcesJar(type: Jar) {
      archiveClassifier.convention('sources')
      archiveClassifier.set('sources')
      from android.sourceSets.main.java.source
    }

    task androidJavadocsJar(type: Jar, dependsOn: dokkaJavadoc) {
      archiveClassifier.convention('javadoc')
      archiveClassifier.set('javadoc')
      from "$buildDir/dokka"
    }

    artifacts {
      archives androidSourcesJar
      archives androidJavadocsJar
    }

    publishing {
      publications {
        Cachify(MavenPublication) {
          artifact androidSourcesJar
          artifact androidJavadocsJar
          from project.components.release

          artifactId project.name
          groupId POM_GROUP
          version POM_VERSION
        }
      }
    }
  }
}

allprojects {
  apply plugin: 'com.github.ben-manes.versions'
  apply plugin: "com.diffplug.spotless"

  repositories {
    gradlePluginPortal()
    google()
    mavenCentral()
  }

  // Java compile
  tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
    options.deprecation = true
  }

  // Spotless
  spotless {
    java {
      target "src/**/*.java"

      removeUnusedImports()
      trimTrailingWhitespace()
      endWithNewline()
      indentWithSpaces(2)
    }
    kotlin {
      target "src/**/*.kt"
      ktfmt()

      trimTrailingWhitespace()
      endWithNewline()
      indentWithSpaces(2)
    }
    groovyGradle {
      target "*.gradle"
      greclipse()

      trimTrailingWhitespace()
      endWithNewline()
      indentWithSpaces(2)
    }
  }

  // Version Plugin ignore non-stable releases
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
  }

  tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
      isNonStable(it.candidate.version)
    }
  }
}
