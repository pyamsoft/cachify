/*
 * Copyright 2025 pyamsoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.jetbrains.kotlin.gradle.dsl.JvmTarget

plugins {
  // Android AGP
  // https://developer.android.com/studio/build#top-level
  alias(libs.plugins.android) apply false

  // Fix Android build cache
  // https://github.com/gradle/android-cache-fix-gradle-plugin
  alias(libs.plugins.android.cacheFix) apply false

  // Kotlin
  // https://developer.android.com/studio/build#top-level
  alias(libs.plugins.kotlin.android) apply false

  // Dokka
  // https://github.com/Kotlin/dokka
  alias(libs.plugins.dokka) apply false

  // Spotless
  // https://github.com/diffplug/spotless
  alias(libs.plugins.spotless) apply true

  // Validate the public API
  // https://github.com/Kotlin/binary-compatibility-validator
  alias(libs.plugins.kotlinx.binaryValidator) apply true

  // Gradle Doctor
  // https://runningcode.github.io/gradle-doctor/
  alias(libs.plugins.doctor) apply true

  // Caupain
  // https://github.com/deezer/caupain/blob/main/gradle-plugin/README.md
  alias(libs.plugins.caupain) apply true
}

subprojects {
  apply(plugin: "com.android.library")
  apply(plugin: "org.gradle.android.cache-fix")
  apply(plugin: "org.jetbrains.kotlin.android")
  apply(plugin: "org.jetbrains.dokka")
  apply(plugin: "maven-publish")

  android {
    compileSdk = 36

    //noinspection GroovyMissingReturnStatement
    defaultConfig {
      minSdk = 24

      // For vector drawables
      vectorDrawables.useSupportLibrary = true

      // Consumer proguard file
      consumerProguardFiles("proguard-rules.pro")
    }

    compileOptions {
      sourceCompatibility = JavaVersion.VERSION_21
      targetCompatibility = JavaVersion.VERSION_21

      // Flag to enable support for the new language APIs
      coreLibraryDesugaringEnabled = true
    }

    publishing {
      singleVariant("release") {
        withSourcesJar()
        withJavadocJar()
      }
    }

    buildTypes {
      debug {
        minifyEnabled = false
        shrinkResources = false
      }

      release {
        minifyEnabled = false
        shrinkResources = false
      }
    }

    buildFeatures {
      buildConfig = false
    }
  }

  tasks.withType(JavaCompile).configureEach {
    options.compilerArgs.add("-Xlint:unchecked")
    options.compilerArgs.add("-Xlint:deprecation")
    options.deprecation = true
  }

  kotlin {
    compilerOptions {
      jvmTarget = JvmTarget.JVM_21
      freeCompilerArgs.add("-Xexplicit-api=strict")
    }

    abiValidation {
      enabled = true
    }
  }

  // Enable ABI checking
  //
  // https://github.com/JakeWharton/timber/commit/65747860b59e40a95866cbb4bd866f44a3b1880c
  // TODO: https://youtrack.jetbrains.com/issue/KT-78525
  tasks.named("check") {
    it.dependsOn(tasks.named("checkLegacyAbi"))
  }

  // Configure matching toolchains
  // https://kotlinlang.org/docs/gradle-configure-project.html#2c42d1dc
  //
  // Or maybe don't
  // https://jakewharton.com/gradle-toolchains-are-rarely-a-good-idea/
  // kotlin {
  //   jvmToolchain(17)
  // }
  // java {
  //   toolchain {
  //     languageVersion.set(JavaLanguageVersion.of(17))
  //   }
  // }

  project.afterEvaluate {
    publishing {
      publications {
        Cachify(MavenPublication) {
          from project.components.release

          artifactId = project.name
          groupId = "com.github.pyamsoft"
          version = "0.3.7"
        }
      }
    }
  }

  repositories {
    gradlePluginPortal()
    google()
    mavenCentral()
  }

  dependencies {
    coreLibraryDesugaring(libs.android.desugar)
  }
}

// Spotless
spotless {
  java {
    target("src/**/*.java")

    removeUnusedImports()
    trimTrailingWhitespace()
    endWithNewline()
    leadingTabsToSpaces(2)
  }
  kotlin {
    target("src/**/*.kt")
    ktfmt()

    trimTrailingWhitespace()
    endWithNewline()
    leadingTabsToSpaces(2)
  }
  kotlinGradle {
    target("*.gradle.kts")
    ktfmt()

    trimTrailingWhitespace()
    endWithNewline()
    leadingTabsToSpaces(2)
  }
  groovyGradle {
    target("*.gradle")
    greclipse()

    trimTrailingWhitespace()
    endWithNewline()
    leadingTabsToSpaces(2)
  }
}
