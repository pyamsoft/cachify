/*
 * Copyright 2020 Peter Kenji Yamanaka
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
  ext {
    kotlin_version = '1.5.0'
    dokka_version = "1.4.32"
  }
  repositories {
    mavenLocal()
    google()
    mavenCentral()

    maven {
      url "https://jitpack.io/"
    }

    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }

  ext {

    minSdk = 22
    maxSdk = 30

    coroutines = '1.5.0'
    annotation = '1.2.0'
  }

  dependencies {
    classpath "com.android.tools.build:gradle:4.2.1"

    // Gradle version checker
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.38.0'

    // Kotlin
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

    // Dokka
    classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"

    // Spotless
    classpath "com.diffplug.spotless:spotless-plugin-gradle:5.12.5"
  }
}

subprojects {
  apply plugin: 'com.android.library'
  apply plugin: 'kotlin-android'
  apply plugin: 'org.jetbrains.dokka'
  apply plugin: 'maven-publish'

  final String POM_GROUP = "com.github.pyamsoft"
  final String POM_VERSION = "0.0.23"

  android {
    compileSdkVersion rootProject.ext.maxSdk

    //noinspection GroovyMissingReturnStatement
    defaultConfig {
      minSdkVersion rootProject.ext.minSdk

      // For vector drawables
      vectorDrawables.useSupportLibrary = true

      // Consumer proguard file
      consumerProguardFiles "proguard-rules.pro"

      // Only English, I don't have any translations
      resConfigs "en"

      compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
      }
    }

    buildTypes {
      debug {
        minifyEnabled false
        shrinkResources false
      }

      release {
        minifyEnabled false
        shrinkResources false
        proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
      }
    }

    buildFeatures {
      buildConfig false
    }
  }

  project.afterEvaluate {
    task androidSourcesJar(type: Jar) {
      archiveClassifier.convention('sources')
      archiveClassifier.set('sources')
      from android.sourceSets.main.java.source
    }

    task androidJavadocsJar(type: Jar, dependsOn: dokkaJavadoc) {
      archiveClassifier.convention('javadoc')
      archiveClassifier.set('javadoc')
      from "$buildDir/dokka"
    }

    artifacts {
      archives androidSourcesJar
      archives androidJavadocsJar
    }

    publishing {
      publications {
        Cachify(MavenPublication) {
          artifact androidSourcesJar
          artifact androidJavadocsJar
          from project.components.release

          groupId POM_GROUP
          artifactId project.name
          version POM_VERSION
        }
      }
    }
  }
}

allprojects {
  apply plugin: 'com.github.ben-manes.versions'
  apply plugin: "com.diffplug.spotless"

  spotless {
    java {
      target "src/**/*.java"

      removeUnusedImports()
      trimTrailingWhitespace()
      endWithNewline()
      indentWithSpaces(2)
    }
    kotlin {
      target "src/**/*.kt"
      ktfmt()

      trimTrailingWhitespace()
      endWithNewline()
      indentWithSpaces(2)
    }
    groovyGradle {
      target "*.gradle"
      greclipse()

      trimTrailingWhitespace()
      endWithNewline()
      indentWithSpaces(2)
    }
  }

  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
  }

  tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
      isNonStable(it.candidate.version)
    }
  }

  repositories {
    mavenLocal()
    google()
    mavenCentral()

    maven {
      url "https://jitpack.io/"
    }

    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }

  tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
    options.deprecation = true
  }
}
